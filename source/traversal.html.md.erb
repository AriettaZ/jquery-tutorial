---
title: jQuery Traversing
---
<!-- Author: Gail Chen
Created: 7/11
Edit: N/A
Description: jQuery Traversing Tutorial -->

<h1>jQuery Traversing</h1>
  - JQuery provides a variety of traversal methods to help select HTML elements based on their relations to other elements. After selecting an element, you can access its ancestors(parent, grandparent, etc), descendants(child, grandchild, etc) and siblings(share the same parent).

<h2 id="ancestors">Ancestors</h2>
  - An ancestor of an element 'elt' is an element that is above the 'elt' element in the DOM tree. Ancestors include parent, grandparent, etc.
  - In the HTML tree shown below,
    - The \<body\> element is the parent of the \<div\> element.
    - The \<div\> element is the parent of \<h2\>, \<p\> and \<ul\> elements.
    - The \<ul\> element is the parent and the ancestor of three \<li\> elements.
    - The \<body\> element is the ancestor of all the other elements.
    - The \<div\> element is the ancestor of \<h2\>, \<p\>, \<ul\>, \<li\> elements.
    <br/><img src="/images/HTMLTree.png" title="DOMTree" alt="Image not found">

  - .parent()
    - Gets the parent of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).parent([selector])
        ```
    - Example: $("p").parent() returns the parent of \<p\> elements.

  - .parents()
    - Gets all ancestors of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).parents([selector])
        ```
    - Example: $("span").parents() returns all ancestors of the \<span\> elements.

  - .parentsUntil()
    - Gets all ancestors of the selected element up to but not including the element that matches the optional selector, optionally filtered by a filter.
    - Syntax:

        ```javascript
          $(selector).parentsUntil([selector][, filter])
        ```
    - Example: $("span").parentsUntil("div") returns all ancestors between \<span\> and \<div\> elements (exclusive).

<p data-height="300" data-theme-id="0" data-slug-hash="XBbXOG" data-default-tab="js,result" data-user="ctz33" data-embed-version="2" data-pen-title="jQuery Traversing Ancestors" class="codepen">See the Pen <a href="https://codepen.io/ctz33/pen/XBbXOG/">jQuery Traversing Siblings</a> by ctz33 (<a href="https://codepen.io/ctz33">@ctz33</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
  - For a complete reference of all the jQuery methods of getting ancestors, please visit [jQuery Traversing Reference](/traversal_reference.html#ancestors).

<h2 id="descendants">Descendants</h2>
  - A descendant of an element 'elt' is an element that is below the 'elt' element in the DOM tree. Descendants include children, grandchildren, etc.
  - In the DOM tree shown below,
    - The \<div\> element is a child of the \<body\> element.
    - \<h2\>, \<p\> and \<ul\> elements are children of the \<div\> element.
    - Three \<li\> elements are children of the \<ul\> element.
    - \<h2\>, \<p\>, \<ul\>, </li> elements are descendants of \<div\> and \<body\> elements.
    - \<li\> elements are also descendants of \<ul\> elements.
    <br/><img src="/images/DOMTree.png" title="DOMTree" alt="Image not found">

  - .children()
    - Gets all children of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).children([selector])
        ```
    - Example: $("div").children() returns all child elements of all \<div\> elements.

  - .find()
    - Gets all descendants of the selected element, filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).find(selector)
        ```
    - Example: $("div").find("li") returns all \<li\> elements that are descendants of \<div\> elements

<p data-height="300" data-theme-id="0" data-slug-hash="yqNYqg" data-default-tab="html,result" data-user="ctz33" data-embed-version="2" data-pen-title="jQuery Traversing Descendants" class="codepen">See the Pen <a href="https://codepen.io/ctz33/pen/yqNYqg/">jQuery Traversing Descendants</a> by ctz33 (<a href="https://codepen.io/ctz33">@ctz33</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>


<h2 id="siblings">Siblings</h2>
  - Siblings share the same parent element.
  - In the DOM tree shown below,
    - \<h2\>, \<p\> and \<ul\> elements are siblings.
    - Three \<li\> elements are siblings.
    <br/><img src="/images/DOMTree.png" title="DOMTree" alt="Image not found">

  - .next()
    - Gets the immediately following sibling of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).next([selector])
        ```
    - Example: $("h2").next() returns the immediately following sibling of the \<h2\> elements.

  - .nextAll()
    - Gets all following siblings of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).nextAll([selector])
        ```
    - Example: $("h2").nextAll() returns all following siblings of the \<h2\> elements.

  - .nextUntil()
    - Gets all following siblings of the selected element up to but not including the element that matches the selector, optionally filtered by a filter.
    - Syntax:

        ```javascript
          $(selector).nextUntil([selector][, filter])
        ```
    - Example: $("h2").nextUntil("ul") returns all following siblings between \<h2\> and \<ul\> elements (exclusive).

  - .siblings()
    - Gets all the siblings of the selected element, optionally filtered by a selector.
    - Syntax:

        ```javascript
          $(selector).siblings([selector])
        ```
    - Example: $("p").siblings() returns all the siblings of the \<p\> elements.

<p data-height="300" data-theme-id="0" data-slug-hash="gjpwKw" data-default-tab="js,result" data-user="ctz33" data-embed-version="2" data-pen-title="jQuery Traversing Siblings" class="codepen">See the Pen <a href="https://codepen.io/ctz33/pen/gjpwKw/">jQuery Traversing Siblings</a> by ctz33 (<a href="https://codepen.io/ctz33">@ctz33</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
- For a complete reference of all the jQuery methods of getting siblings, please visit [jQuery Traversing Reference](/traversal_reference.html#siblings).


<h2 id="filtering">Filtering</h2>
  - Filtering methods help select HTML elements based on their position(index) and contents.
  - .eq()
    - Gets the element with the specific index number of the selected elements.
    - Syntax:

        ```javascript
          $(selector).eq(index)
        ```
    - Example:$("li").eq(1) returns the second \<li\> element in the document.

  - .first()
    - Gets the first element of the selected elements.
    - Syntax:

        ```javascript
          $(selector).first()
        ```
    - Example: $("li").first() returns the first \<li\> element in the document.

  - .filter()
    - Gets the elements that matches the selector or pass the function’s test.
    - Syntax:

        ```javascript
          $(selector).filter(selector/function)
        ```
    - Example:$("p").filter(".test-class") returns \<p\> elements that have a class "test-class"

  - .not()
    - Gets all elements inside of the selected elements that don’t match the selector.
    - Syntax:

        ```javascript
          $(selector).not(selector)
        ```
    - Example: $("p").not(".test-class") returns \<p\> elements that do not have a class "test-class".

<p data-height="350" data-theme-id="0" data-slug-hash="NBqgXW" data-default-tab="html,result" data-user="ctz33" data-embed-version="2" data-pen-title="jQuery Traversing Filtering" class="codepen">See the Pen <a href="https://codepen.io/ctz33/pen/NBqgXW/">jQuery Traversing Filtering</a> by ctz33 (<a href="https://codepen.io/ctz33">@ctz33</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
  - For a complete reference of all the jQuery filtering methods, please visit [jQuery Traversing Reference](/traversal_reference.html#filtering).


<h2 id="iteration">Iteration</h2>
  - Iteration methods iterate through elements in the selected elements and pass each element to a function.
  - .each()
    - Executes a function for each element in the selected elements.
    - Syntax:

        ```javascript
          $(selector).each(function)
        ```
    - Example: $("p.class-name").each(function(){this.innerHTML += " executes function"}); executes the function that adds " executes function" to the end of the text for each \<p\> element that has a class "class-name".

  - .map()
    - Passes each element in the selected elements through a callback function, creating a new jQuery object containing the return values.
    - Syntax:

        ```javascript
          $(selector).map(callback)
        ```
    - Example: $("div").map(function(){return this.id;}) creates a new jQuery object containing each \<div\> element’s id.

<p data-height="400" data-theme-id="0" data-slug-hash="oMXGvj" data-default-tab="html,result" data-user="ctz33" data-embed-version="2" data-pen-title="jQuery Traversing Iteration" class="codepen">See the Pen <a href="https://codepen.io/ctz33/pen/oMXGvj/">jQuery Traversing Iteration</a> by ctz33 (<a href="https://codepen.io/ctz33">@ctz33</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
