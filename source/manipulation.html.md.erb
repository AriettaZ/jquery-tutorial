---
title: jQuery Manipulation
---
<!-- Created by Channing Jacobs -->

# jQuery Manipulation
## Introduction
jQuery provides methods to access, update, add, and remove DOM elements and attributes on a web page. Recall, a set of one or more objects may be selected by direct selection: “$(selector)” or through traversal: “$(selector).jQuery\_traversal\_method()”.

jQuery manipulation methods can be split into two categories. The first is HTML manipulation. These methods interact with elements and their content. The second is CSS manipulation. These methods interact with the style attribute of elements.

## HTML Manipulation

Once you have selected a set of one or more objects, you may interact with their content. The content may be plain text, html data, or element attributes. The most common operations are accessing and updating content.

### Accessing and Updating:

There are four methods to access and update web page content. The .text() method is used to get or replace text. The .html() method gets or replaces html. The .val() method gets or replaces form text data. Finally, the .attr() method gets or replaces elements’ attributes. Each method and its use cases is listed below.

#### .text()
```javascript
    .text()
    .text(new_text)
    .text(function(index, old_text))
```
- The .text() method returns the combined text contents of each selected element and their descendants in a string.
- When .text() is provided with new\_text, the text of each selected element is updated to new\_text. new\_text may be a string, boolean, or number (booleans and numbers are converted to a string representation by default).
- If the user supplies a function, it will receive the index of the element from the selected set of elements and the old\_text value. The function must return a string.

**Notes:** The .text() method may be used on XML and HTML documents. Whitespace may vary due to HTML parser used by each browser. The value of form elements can’t be set or accessed with .text(); use .val() for these elements. This method escapes the provided string (by calling .createTextNode()) to avoid rendering errors. For example, &lt;div&gt; is transformed into \&lt;div\&gt;”.

**Example:**
  <p data-height="265" data-theme-id="0" data-slug-hash="BPNbzM" data-default-tab="html,result" data-user="channingjacobs" data-embed-version="2" data-pen-title="BPNbzM" class="codepen">See the Pen <a href="https://codepen.io/channingjacobs/pen/BPNbzM/">BPNbzM</a> by ChanningJacobs (<a href="https://codepen.io/channingjacobs">@channingjacobs</a>) on <a href="https://codepen.io">CodePen</a>.</p>
  <script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### .html()
```javascript
    .html()
    .html(new_html)
    .html(function(index, old_html))
```
- The .html() method returns the html contents of the first element in the set of selected elements.
- Each selected element will replace its html content with the provided valid html string new_html.
- A user defined function may be passed if it returns a valid html string. See .text() for more detail.

**Notes:** The .html() method can’t be called on XML documents. The browser’s innerHTML property is used to retrieve html content. This means that formatting of the HTML may differ from the original document.

**Example:**
<p data-height="265" data-theme-id="0" data-slug-hash="pZJBad" data-default-tab="html,result" data-user="channingjacobs" data-embed-version="2" data-pen-title=".html()" class="codepen">See the Pen <a href="https://codepen.io/channingjacobs/pen/pZJBad/">.html()</a> by ChanningJacobs (<a href="https://codepen.io/channingjacobs">@channingjacobs</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### .val()
```javascript
    .val()
    .val(new_value)
    .val(function(index,value))
```
- The .val() method returns the value of form elements. Examples of form elements include: input, select, textarea, and checkboxes.
- The user may provide a new_value to replace in form elements. The new_value may be a string, number, or array of strings (one string is used for each selected element).
- A user function may be passed if it returns a valid value string. See .text() for more detail.

**Notes:** A select element with multiple attribute will return an array of values for each selected option when .val() is called. The .val() method will return undefined if called on an empty collection.

**Example:**
<p data-height="265" data-theme-id="0" data-slug-hash="oMXVNe" data-default-tab="html,result" data-user="channingjacobs" data-embed-version="2" data-pen-title="oMXVNe" class="codepen">See the Pen <a href="https://codepen.io/channingjacobs/pen/oMXVNe/">oMXVNe</a> by ChanningJacobs (<a href="https://codepen.io/channingjacobs">@channingjacobs</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

#### .attr()
```javascript
    .attr(attr_name)
    .attr(attr_name, new_value)
    .attr(attr_name, function(index, old_value))
```

- The .attr() method returns the attribute matching the attr_name for the first element in the set of selected elements. It will return undefined for attributes that have not been set.
- The user may provide a new_value to replace the value of the attribute attr_name. The new_value may be a string, number, or null (to remove the attribute).
- A user function may be passed if it returns a valid value string. See .text() for more detail.

**Notes:** To loop through attributes of multiple selected elements, use javascript .forEach or .map (or jQuery .each and .map). If new_string is empty, the attribute is removed.

**Example:**

### Adding:


<a class="previous" href="./traversal.html"><span>   Previous</span></a>
<a class="next" href="./Event-and-Animation.html"><span>Next  </span></a>
